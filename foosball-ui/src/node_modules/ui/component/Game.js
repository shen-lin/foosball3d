import React, { Component } from "react";
import "./Game.css";
import { connect } from "react-redux";
import { BrowserRouter as Router, Route, Link } from "react-router-dom";
import { Scene, registerHandler, removeHandler } from "react-babylonjs";
import BABYLON from "babylonjs";
// import "babylonjs-materials";

import SceneBuilder from "babylon/SceneBuilder";
import TableModelBuilder from "babylon/TableModelBuilder";

class Game extends Component {
  constructor(props) {
    super(props);

    this.onSceneMount = this.onSceneMount.bind(this);
    this.onMeshPicked = this.onMeshPicked.bind(this);
    this.debugOn = props.debugOn;
    this.debugOff = props.debugOff;
    this.debugEnabled = false;
  }

  toggleDebug() {
    if (this.debugEnabled) {
      this.debugOff();
    } else {
      this.debugOn();
    }
    this.debugEnabled = !this.debugEnabled;
  }

  onMeshPicked(mesh, scene) {
    console.log("Picked mesh", mesh);
  }

  onSceneMount(eventArgs /* SceneEventArgs */) {
    const { canvas, scene, engine } = eventArgs;
    this.scene = scene;

    const camera = new BABYLON.FreeCamera(
      "camera1",
      new BABYLON.Vector3(0, 5, -10),
      scene
    );
    camera.attachControl(canvas, false);
    camera.setTarget(BABYLON.Vector3.Zero());
    this.initScene(eventArgs);

    engine.runRenderLoop(() => {
      scene.render();
    });
  }

  initScene(eventArgs) {
    const { canvas, scene, engine } = eventArgs;
    const sceneBuilder = new SceneBuilder(canvas, scene, engine);
    const tableModelBuilder = new TableModelBuilder(canvas, scene, engine);
    
    sceneBuilder.build();
    tableModelBuilder.build();
  }

  render() {
    return (
      <Scene
        onSceneMount={this.onSceneMount}
        onMeshPicked={this.onMeshPicked}
        visible={true}
      />
    );
  }
}

function mapStateToProps(state) {
  const { route } = state;

  return {
    route
  };
}

function mapDispatchToProps(dispatch) {
  return {
    actions: {
      changeRoute: routeName =>
        dispatch({
          type: "CHANGE_ROUTE",
          routeName
        })
    }
  };
}

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(Game);
