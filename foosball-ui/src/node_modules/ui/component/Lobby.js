import React, { Component } from "react";

import {
  BrowserRouter as Router,
  Redirect,
  Route,
  Link
} from "react-router-dom";

import "./Lobby.css";
import { connect } from "react-redux";
import Avatar from "@material-ui/core/Avatar";
import Badge from "@material-ui/core/Badge";
import TextField from "@material-ui/core/TextField";
import FormControlLabel from "@material-ui/core/FormControlLabel";
import Switch from "@material-ui/core/Switch";
import Button from "@material-ui/core/Button";
import MsgIcon from "@material-ui/icons/Message";
import BackspaceIcon from "@material-ui/icons/ArrowBack";
import IconButton from "@material-ui/core/IconButton";
import InputAdornment from "@material-ui/core/InputAdornment";
import Divider from "@material-ui/core/Divider";
import Icon from "@material-ui/core/Icon";
import Chip from "@material-ui/core/Chip";
import HousePng from "./images/house.png";
import ScenePng from "./images/scene4.png";
import ModePng from "./images/mode.png";

import Dialog from "@material-ui/core/Dialog";
import DialogActions from "@material-ui/core/DialogActions";
import DialogContent from "@material-ui/core/DialogContent";
import DialogContentText from "@material-ui/core/DialogContentText";
import DialogTitle from "@material-ui/core/DialogTitle";
import Slide from "@material-ui/core/Slide";

function Transition(props) {
  return <Slide direction="up" {...props} />;
}

class Lobby extends Component {
  state = {
    open: false
  };

  handleOpenDialog = () => {
    this.setState({ open: true });
  };

  handleCloseDialog = () => {
    this.setState({ open: false });
  };

  constructor(props) {
    super(props);
  }

  checkPlayer(position) {
    console.log("Check player info", position);
  }

  routeTo(target) {
    this.props.actions.changeRoute(target);
  }

  startGame() {
    let allReady = true;

    this.props.gamestate.players.forEach(function(player) {
      if (!player.ready) {
        allReady = false;
        return;
      }
    });

    if (allReady) {
      // Update server to notify all clients to load game
    } else {
      this.handleOpenDialog();
    }
  }

  isPlayerReady() {
    return this.props.player.ready;
  }

  setReady(event, checked) {
    this.props.player.ready = checked;
    this.props.actions.setReady(this.props.player.ready);
  }

  render() {
    if (
      this.props.route.name === "home" ||
      !this.props.gamestate ||
      !this.props.gamestate.roominfo
    ) {
      return <Redirect to="/" />;
    }

    return (
      <div className="lobby">
        <Dialog
          open={this.state.open}
          TransitionComponent={Transition}
          keepMounted
          onClose={this.handleCloseDialog}
          aria-labelledby="alert-dialog-slide-title"
          aria-describedby="alert-dialog-slide-description"
        >
          <DialogTitle id="alert-dialog-slide-title">
            {"Not all players are ready"}
          </DialogTitle>
          <DialogContent>
            <DialogContentText id="alert-dialog-slide-description">
              When all the player set to be ready, the host can start the game.
            </DialogContentText>
          </DialogContent>
          <DialogActions>
            <Button onClick={this.handleCloseDialog} color="primary">
              OK
            </Button>
          </DialogActions>
        </Dialog>

        <div className="lobby-main">
          <div className="lobby-main-left">
            <div className="lobby-main-left-position">
              {this.props.gamestate.players.map((player, index) => (
                <div
                  className={
                    "lobby-pos lobby-pos-" +
                    index +
                    " " +
                    (this.props.gamestate.roominfo.creator.client_session_id ===
                    player.client_session_id
                      ? ""
                      : "lobby-pos-guest")
                  }
                  onClick={this.checkPlayer.bind(this, index)}
                  key={player.client_session_id}
                >
                  <Badge badgeContent="H" color="primary">
                    <Avatar
                      className="lobby-avatar"
                      src={
                        "http://graph.facebook.com/" +
                        player.fb_client_id +
                        "/picture"
                      }
                    />
                  </Badge>
                </div>
              ))}
            </div>
          </div>

          <div className="lobby-main-right">
            <div className="lobby-main-right-messages-ctn">
              <div className="lobby-main-right-messages-list">
                <div className="lobby-main-right-message">
                  [Shen Lin] Hello guys
                </div>
                <div className="lobby-main-right-message">[Shen Lin] glhf</div>
              </div>
            </div>
            <Divider />
            <div className="lobby-main-right-send">
              <div>
                <TextField
                  id="input-with-icon-grid"
                  label="Chat"
                  InputProps={{
                    endAdornment: (
                      <InputAdornment variant="filled" position="end">
                        <IconButton
                          aria-label="Toggle password visibility"
                          onClick={this.handleClickShowPassword}
                        >
                          <MsgIcon />
                        </IconButton>
                      </InputAdornment>
                    )
                  }}
                />
              </div>
            </div>
          </div>
        </div>

        <div className="lobby-footer-action">
          <div className="lobby-footer-left">
            <Button
              variant="contained"
              className=""
              onClick={this.routeTo.bind(this, "home")}
            >
              Exit
            </Button>
          </div>
          <div className="lobby-footer-middle">
            <Chip
              avatar={<Avatar src="/static/media/house.png" />}
              label={this.props.gamestate.roominfo.name}
            />
            <Chip
              avatar={<Avatar src="/static/media/scene4.png" />}
              label={this.props.gamestate.roominfo.scene}
            />
            <Chip
              avatar={<Avatar src="/static/media/mode.png" />}
              label={this.props.gamestate.roominfo.mode}
            />
          </div>
          <div className="lobby-footer-right">
            <FormControlLabel
              control={
                <Switch
                  className=""
                  disableRipple
                  onChange={this.setReady.bind(this)}
                  checked={this.isPlayerReady()}
                />
              }
              label="Ready"
            />
            <Button
              variant="contained"
              className=""
              onClick={this.startGame.bind(this, "home")}
            >
              Start
            </Button>
          </div>
        </div>
      </div>
    );
  }
}

function mapStateToProps(state) {
  console.log(state);
  const { player, route, gamestate } = state;
  return {
    player,
    route,
    gamestate
  };
}

function mapDispatchToProps(dispatch) {
  return {
    actions: {
      joinRoom: (lobbyName, player) =>
        dispatch({
          type: "JOIN_ROOM",
          payload: {
            lobbyName,
            player
          }
        }),
      setReady: (player) =>
        dispatch({
          type: "SET_READY",
          payload: {
            player
          }
        }),
      changeRoute: routeName =>
        dispatch({
          type: "CHANGE_ROUTE",
          routeName
        })
    }
  };
}

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(Lobby);
