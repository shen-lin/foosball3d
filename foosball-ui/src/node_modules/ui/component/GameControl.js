import React, { Component } from "react";
import { connect } from "react-redux";
import "./GameControl.css";
import Hammer from "react-hammerjs";

class GameControl extends Component {
  constructor(props) {
    super(props);
    this.state = {
      y: 0
    };
  }

  handleGameControl(event) {
    this.handleGameControlX(event);
    this.handleGameControlY(event);
  }

  handleGameControlX(event) {
    const deltaX = event.deltaX;
    console.log(event);
    let x = this.props.gamestate[this.props.gameControl];
    this.props.actions.updateGameControlX(this.props.gameControl, x);
  }

  handleGameControlY(event) {
    const deltaY = event.deltaY;
    let y = this.state.y;
    y += deltaY;
    if (y >= 0) {
      y = 0;
    } else if (y <= -120) {
      y = -120;
    }
    this.props.actions.updateGameControlY(this.props.gameControl, y);
  }

  handleGameControlStart() {
    this.setState({
      y: this.props.gamestate[this.props.gameControl].y
    });
  }

  render() {
    const styles = {
      positions: {
        top: `${this.props.gamestate[this.props.gameControl].y}px`
      }
    };
    const { positions } = styles;

    return (
      <div className="control-bar" style={positions}>
        <Hammer
          onPan={this.handleGameControl.bind(this)}
          onPanStart={this.handleGameControlStart.bind(this)}
          direction="DIRECTION_ALL"
        >
          <div className="control-handle" />
        </Hammer>
        <div className="control-bar-bottom" />
        <div className="control-bar-top" />
        <div className="control-bar-rotation">
          {this.props.gamestate[this.props.gameControl].x}
        </div>
      </div>
    );
  }
}

function mapStateToProps(state) {
  const { route, gamestate } = state;

  return {
    route,
    gamestate
  };
}

function mapDispatchToProps(dispatch) {
  return {
    actions: {
      changeRoute: routeName =>
        dispatch({
          type: "CHANGE_ROUTE",
          routeName
        }),
      updateGameControlX: (gameControl, newX) =>
        dispatch({
          type: "GAME_CONTROL_Y_UPDATE",
          gameControl: gameControl,
          newY: newX
        }),
      updateGameControlY: (gameControl, newY) =>
        dispatch({
          type: "GAME_CONTROL_Y_UPDATE",
          gameControl: gameControl,
          newY: newY
        })
    }
  };
}

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(GameControl);
