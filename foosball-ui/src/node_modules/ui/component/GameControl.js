import React, { Component } from "react";
import { connect } from "react-redux";
import "./GameControl.css";
import Hammer from "react-hammerjs";

class GameControl extends Component {
  constructor(props) {
    super(props);
    this.state = {
      y: 0
    }
  }

  render() {
    const styles = {
      positions: {
        top: `${this.props.gamestate[this.props.gameControl]}px`
      }
    };
    const { positions } = styles;

    return (
      
        <div className="control-bar" style={positions}>
          <Hammer onPan={handleGameControl.bind(this)} onPanStart={handleGameControlStart.bind(this)} direction='DIRECTION_ALL'>
            <div className="control-handle" />
          </Hammer>
          <div className="control-bar-bottom" />
          <div className="control-bar-top" />
        </div>
    );
  }
}

function handleGameControl(event) {
  const deltaX = event.deltaX;
  const deltaY = event.deltaY;

  
  let y = this.state.y;
  console.log(deltaY, y);
  y += deltaY;
  if (y >= 0) {
    y = 0;
  } else if (y <= -120) {
    y = -120;
  }
  this.props.actions.updateGameControlY(this.props.gameControl, y);

}

function handleGameControlStart(event) {
  this.setState({
    y: this.props.gamestate[this.props.gameControl]
  });
}

function mapStateToProps(state) {
  const { route, gamestate } = state;

  return {
    route, gamestate
  };
}

function mapDispatchToProps(dispatch) {
  return {
    actions: {
      changeRoute: routeName =>
        dispatch({
          type: "CHANGE_ROUTE",
          routeName
        }),
      updateGameControlY: (gameControl, newY) => 
        dispatch({
          type: "GAME_CONTROL_Y_UPDATE",
          gameControl: gameControl,
          newY: newY
        })  
    }
  };
}

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(GameControl);
