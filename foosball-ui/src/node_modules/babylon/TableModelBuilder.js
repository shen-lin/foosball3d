import BABYLON, { Vector3 } from "babylonjs";
import marble from "resources/material/marble_1.jpg";
import gold from "resources/material/gold.jpg";
import gold2 from "resources/material/gold_2.jpg";
import gold3 from "resources/material/gold_3.jpg";

class TableModelBuilder {
  // Full table width and length
  TABLE_WIDTH = 5;
  TABLE_LENGTH = 9.3;

  // Space between bars
  TABLE_BAR_WIDTH = 4;
  TABLE_BAR_LENGTH = 8.3;

  BAR_Y = 200;
  BAR_WIDTH = 0.7;
  BAR_HEIGHT = 3;

  CROSSBAR_Y = this.BAR_Y - (this.BAR_HEIGHT / 4);
  CROSSBAR_DIAMETER = 0.2;
  CROSSBAR_LENGTH = this.TABLE_BAR_WIDTH;

  SUPPORT_Y = this.BAR_Y - this.BAR_HEIGHT / 2;
  SUPPORT_HEIGHT = 0.08;
  SUPPORT_DIAMETER = this.BAR_WIDTH * 0.85;
  SUPPORT_SIDES = 6;

  FIELD_LENGTH = 7.8;
  FIELD_WIDTH = 4.6;
  BASEBOARD_Y = this.BAR_Y + this.BAR_HEIGHT / 2;


  GOAL_PANEL_Y = this.BAR_Y + (this.BAR_HEIGHT / 2);
  GOAL_PANEL_WIDTH = this.TABLE_BAR_WIDTH + this.BAR_WIDTH;
  GOAL_PANEL_HEIGHT = 2.2;

  constructor(canvas, scene) {
    this.canvas = canvas;
    this.scene = scene;
    this.engine = scene.getEngine();
  }

  build() {
    this.buildBars();
    this.buildCrossBars();
    this.buildSupports();
    this.buildGoalPanels();
    this.buildHandlePanels();
    this.buildSurface();
    this.buildBaseBoard();
  }

  buildBars() {
    const mat = new BABYLON.StandardMaterial("mat", this.scene);
    const texture = new BABYLON.Texture(marble, this.scene);
    mat.diffuseTexture = texture;

    const bar1 = this.buildBar("bar1", mat);
    const bar2 = this.buildBar("bar2", mat);
    const bar3 = this.buildBar("bar3", mat);
    const bar4 = this.buildBar("bar4", mat);

    bar1.position.x = -(this.TABLE_BAR_LENGTH / 2);
    bar1.position.y = this.BAR_Y;
    bar1.position.z = -(this.TABLE_BAR_WIDTH / 2);
    bar2.position.x = this.TABLE_BAR_LENGTH / 2;
    bar2.position.y = this.BAR_Y;
    bar2.position.z = -(this.TABLE_BAR_WIDTH / 2);
    bar3.position.x = this.TABLE_BAR_LENGTH / 2;
    bar3.position.y = this.BAR_Y;
    bar3.position.z = this.TABLE_BAR_WIDTH / 2;
    bar4.position.x = -(this.TABLE_BAR_LENGTH / 2);
    bar4.position.y = this.BAR_Y;
    bar4.position.z = this.TABLE_BAR_WIDTH / 2;
  }

  buildBar(id, mat) {
    const bar = BABYLON.MeshBuilder.CreateBox(
      id,
      { height: this.BAR_HEIGHT, size: this.BAR_WIDTH },
      this.scene
    );
    bar.material = mat;
    return bar;
  }

  buildCrossBars() {
    const mat = new BABYLON.StandardMaterial("mat", this.scene);
    const texture = new BABYLON.Texture(gold3, this.scene);
    mat.diffuseTexture = texture;

    const crossBar1 = this.buildCrossBar("crossBar1", mat);
    const crossBar2 = this.buildCrossBar("crossBar2", mat);

    crossBar1.position.x = -(this.TABLE_BAR_LENGTH / 2);
    crossBar1.position.y = this.CROSSBAR_Y;
    crossBar1.rotate(BABYLON.Axis.X, Math.PI / 2, BABYLON.Space.WORLD);

    crossBar2.position.x = this.TABLE_BAR_LENGTH / 2;
    crossBar2.position.y = this.CROSSBAR_Y;
    crossBar2.rotate(BABYLON.Axis.X, Math.PI / 2, BABYLON.Space.WORLD);
  }

  buildCrossBar(id, mat) {
    const crossBar = BABYLON.MeshBuilder.CreateCylinder(
      id,
      {
        tessellation: 36,
        diameter: this.CROSSBAR_DIAMETER,
        height: this.CROSSBAR_LENGTH
      },
      this.scene
    );
    crossBar.material = mat;
    return crossBar;
  }

  buildSupports() {
    const mat = new BABYLON.StandardMaterial("mat", this.scene);
    const texture = new BABYLON.Texture(gold3, this.scene);
    mat.diffuseTexture = texture;

    const suppor1 = this.buildSupport("support1", mat);
    const suppor2 = this.buildSupport("support2", mat);
    const suppor3 = this.buildSupport("support3", mat);
    const suppor4 = this.buildSupport("support4", mat);

    suppor1.position.x = -(this.TABLE_BAR_LENGTH / 2);
    suppor1.position.y = this.SUPPORT_Y;
    suppor1.position.z = -(this.TABLE_BAR_WIDTH / 2);
    suppor2.position.x = this.TABLE_BAR_LENGTH / 2;
    suppor2.position.y = this.SUPPORT_Y;
    suppor2.position.z = -(this.TABLE_BAR_WIDTH / 2);
    suppor3.position.x = this.TABLE_BAR_LENGTH / 2;
    suppor3.position.y = this.SUPPORT_Y;
    suppor3.position.z = this.TABLE_BAR_WIDTH / 2;
    suppor4.position.x = -(this.TABLE_BAR_LENGTH / 2);
    suppor4.position.y = this.SUPPORT_Y;
    suppor4.position.z = this.TABLE_BAR_WIDTH / 2;
  }

  buildSupport(id, mat) {
    const support = BABYLON.MeshBuilder.CreateCylinder(
      id,
      {
        tessellation: this.SUPPORT_SIDES,
        diameter: this.SUPPORT_DIAMETER,
        height: this.SUPPORT_HEIGHT
      },
      this.scene
    );

    support.material = mat;
    return support;
  }

  buildGoalPanels() {
    const mat = new BABYLON.StandardMaterial("mat", this.scene);
    const texture = new BABYLON.Texture(marble, this.scene);
    mat.diffuseTexture = texture;


    let gaolPanel1 = this.buildGoalPanel('goalPanel1', this.GOAL_PANEL_WIDTH, this.GOAL_PANEL_HEIGHT);
    let gaolPanel2 = this.buildGoalPanel('goalPanel2', this.GOAL_PANEL_WIDTH, this.GOAL_PANEL_HEIGHT);

    gaolPanel1.position.x = -this.TABLE_LENGTH / 2;
    gaolPanel1.position.y = this.GOAL_PANEL_Y;
    gaolPanel1.rotate(BABYLON.Axis.Z, Math.PI / 2, BABYLON.Space.WORLD);
    gaolPanel1.rotate(BABYLON.Axis.X, Math.PI / 2, BABYLON.Space.WORLD);
    gaolPanel1.material = mat;

    gaolPanel2.material = mat;
    gaolPanel2.position.x = this.TABLE_LENGTH / 2;
    gaolPanel2.position.y = this.GOAL_PANEL_Y;
    gaolPanel2.rotate(BABYLON.Axis.Z, Math.PI / 2, BABYLON.Space.WORLD);
    gaolPanel2.rotate(BABYLON.Axis.X, Math.PI / 2, BABYLON.Space.WORLD);
  }

  buildGoalPanel(id, width, height) {
    let shape = [
      new BABYLON.Vector3(-width / 2, 0, height / 2),
      new BABYLON.Vector3(width / 2, 0, height / 2),
      new BABYLON.Vector3(width / 2, 0, -height / 2),
      new BABYLON.Vector3(-width / 2, 0, -height / 2)
    ];

    var holes = [];
    // holes[0] = [
    //   new BABYLON.Vector3(1, 0, -1),
    //   new BABYLON.Vector3(1.5, 0, 0),
    //   new BABYLON.Vector3(1.4, 0, 1),
    //   new BABYLON.Vector3(0.5, 0, 1.5)
    // ];
    // holes[1] = [
    //   new BABYLON.Vector3(0, 0, -2),
    //   new BABYLON.Vector3(0.5, 0, -1),
    //   new BABYLON.Vector3(0.4, 0, 0),
    //   new BABYLON.Vector3(-1.5, 0, 0.5)
    // ];

    let polygon = BABYLON.MeshBuilder.ExtrudePolygon(
      id,
      {
        shape: shape,
        holes: holes,
        depth: 0,
        sideOrientation:BABYLON.Mesh.DOUBLESIDE
      },
      this.scene
    );

    return polygon;
  }

  buildHandlePanels() {}


  buildHandlePanel(id, ) {}

  buildSurface() {}

  buildBaseBoard() {
    const mat = new BABYLON.StandardMaterial("mat", this.scene);
    const texture = new BABYLON.Texture(marble, this.scene);
    mat.diffuseTexture = texture;

    const baseBoard = BABYLON.MeshBuilder.CreatePlane(
      "baseBoard",
      {
        height: this.FIELD_LENGTH,
        width: this.FIELD_WIDTH
      },
      this.scene
    );

    baseBoard.position.y = this.BASEBOARD_Y;
    baseBoard.rotate(BABYLON.Axis.X, Math.PI / 2, BABYLON.Space.WORLD);
    baseBoard.rotate(BABYLON.Axis.Y, Math.PI / 2, BABYLON.Space.WORLD);

    baseBoard.material = mat;
  }
}

export default TableModelBuilder;
