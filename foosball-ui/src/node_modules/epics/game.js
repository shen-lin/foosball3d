import { Subject } from "rxjs";
import { mergeMap, filter } from "rxjs/operators";

import { Client } from "colyseus.js";
const client = new Client("ws://localhost:7000");
let room;

function handleGameStateChange(subject, state) {
  switch (state.step) {
    case "NEW_ROOM":
      createNewRoom(subject, state);
      break;
    case "PLAYER_JOIN":
      joinRoom(subject, state);
      break;
    default:
      reportUnhandledStateChange(state);
  }
}

function createNewRoom(subject, state) {
  console.log("Room State NEW_ROOM", state);
  /*
  subject.next({
    type: "GAME_STATE_NEW_ROOM",
    payload: room.state
  });

  subject.next({
    type: "CHANGE_ROUTE",
    routeName: "lobby"
  });
  */
}

function joinRoom(subject, state) {
  console.log("Room State PLAYER_JOIN", state);
  subject.next({
    type: "GAME_STATE_PLAYER_JOIN",
    payload: room.state
  });

  subject.next({
    type: "CHANGE_ROUTE",
    routeName: "lobby"
  });
}

function reportUnhandledStateChange(state) {
  console.log("Unhandled state change", state);
}

export const createRoomEpic = action$ =>
  action$.pipe(
    filter(action => action.type === "CREATE_ROOM"),

    mergeMap(action => {
      const subject = new Subject();
      room = client.join("standard", {
        standard: action.payload.lobbyName,
        scene: "bluesky",
        mode: "10Pts",
        client_id: "",
        client_session_id: "",
        fb_client_id: "FB" + action.payload.player.id,
        fb_client_name: action.payload.player.name
      });

      room.onStateChange.add(state => {
        handleGameStateChange(subject, state);
      });

      return subject;
    })
  );

export const joinRoomEpic = action$ =>
  action$.pipe(
    filter(action => action.type === "JOIN_ROOM"),

    mergeMap(action => {
      const subject = new Subject();
      room = client.join(action.payload.room.roomId, {
        standard: action.payload.room.metadata.name,
        client_id: "",
        client_session_id: "",
        fb_client_id: "FB" + action.payload.player.id,
        fb_client_name: action.payload.player.name
      });

      room.onStateChange.add(state => {
        handleGameStateChange(subject, state);
      });

      return subject;
    })
  );

export const getRoomListEpic = action$ =>
  action$.pipe(
    filter(action => action.type === "GET_ROOM_LIST"),

    mergeMap(action => {
      const subject = new Subject();
      // Call Colyseus client to get room list
      client.getAvailableRooms("standard", function(rooms, err) {
        if (err) {
          console.error(err);
        } else {
          console.log("Rooms from server", rooms);

          subject.next({
            type: "UPDATE_ROOM_LIST",
            rooms
          });
        }
      });
      return subject;
    })
  );
